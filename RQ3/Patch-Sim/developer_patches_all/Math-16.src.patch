diff -u -b /home/junyang/patch_correctness/gh/patch_correctness/developer_patches/Math/16/mutant-0/buggy-FastMath.java /home/junyang/patch_correctness/gh/patch_correctness/developer_patches/Math/16/mutant-0/patched-FastMath.java
--- /home/junyang/patch_correctness/gh/patch_correctness/developer_patches/Math/16/mutant-0/buggy-FastMath.java	2021-08-22 00:18:38.666190185 -0700
+++ /home/junyang/patch_correctness/gh/patch_correctness/developer_patches/Math/16/mutant-0/patched-FastMath.java	2021-08-22 00:18:38.666190185 -0700
@@ -79,6 +79,7 @@
  */
 public class FastMath {
     /** StrictMath.log(Double.MAX_VALUE): {@value} */
+    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);
 
     /** Archimede's constant PI, ratio of circle circumference to diameter. */
     public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;
@@ -391,13 +392,22 @@
       // exp(-z) can be ignored in comparison with exp(z)
 
       if (x > 20) {
+          if (x >= LOG_MAX_VALUE) {
               // Avoid overflow (MATH-905).
+              final double t = exp(0.5 * x);
+              return (0.5 * t) * t;
+          } else {
               return 0.5 * exp(x);
           }
-      if (x < -20) {
+      } else if (x < -20) {
+          if (x <= -LOG_MAX_VALUE) {
               // Avoid overflow (MATH-905).
+              final double t = exp(-0.5 * x);
+              return (0.5 * t) * t;
+          } else {
               return 0.5 * exp(-x);
       }
+      }
 
       final double hiPrec[] = new double[2];
       if (x < 0.0) {
@@ -452,13 +462,22 @@
       // exp(-z) can be ignored in comparison with exp(z)
 
       if (x > 20) {
+          if (x >= LOG_MAX_VALUE) {
               // Avoid overflow (MATH-905).
+              final double t = exp(0.5 * x);
+              return (0.5 * t) * t;
+          } else {
               return 0.5 * exp(x);
           }
-      if (x < -20) {
+      } else if (x < -20) {
+          if (x <= -LOG_MAX_VALUE) {
               // Avoid overflow (MATH-905).
+              final double t = exp(-0.5 * x);
+              return (-0.5 * t) * t;
+          } else {
               return -0.5 * exp(-x);
       }
+      }
 
       if (x == 0) {
           return x;
