/*   0*/package org.apache.commons.lang3.math;
/*   0*/
/*   0*/import java.math.BigDecimal;
/*   0*/import java.math.BigInteger;
/*   0*/import org.apache.commons.lang3.StringUtils;
/*   0*/
/*   0*/public class NumberUtils {
/*  41*/  public static final Long LONG_ZERO = new Long(0L);
/*   0*/  
/*  43*/  public static final Long LONG_ONE = new Long(1L);
/*   0*/  
/*  45*/  public static final Long LONG_MINUS_ONE = new Long(-1L);
/*   0*/  
/*  47*/  public static final Integer INTEGER_ZERO = new Integer(0);
/*   0*/  
/*  49*/  public static final Integer INTEGER_ONE = new Integer(1);
/*   0*/  
/*  51*/  public static final Integer INTEGER_MINUS_ONE = new Integer(-1);
/*   0*/  
/*  53*/  public static final Short SHORT_ZERO = new Short((short)0);
/*   0*/  
/*  55*/  public static final Short SHORT_ONE = new Short((short)1);
/*   0*/  
/*  57*/  public static final Short SHORT_MINUS_ONE = new Short((short)-1);
/*   0*/  
/*  59*/  public static final Byte BYTE_ZERO = (byte)0;
/*   0*/  
/*  61*/  public static final Byte BYTE_ONE = (byte)1;
/*   0*/  
/*  63*/  public static final Byte BYTE_MINUS_ONE = (byte)-1;
/*   0*/  
/*  65*/  public static final Double DOUBLE_ZERO = new Double(0.0D);
/*   0*/  
/*  67*/  public static final Double DOUBLE_ONE = new Double(1.0D);
/*   0*/  
/*  69*/  public static final Double DOUBLE_MINUS_ONE = new Double(-1.0D);
/*   0*/  
/*  71*/  public static final Float FLOAT_ZERO = new Float(0.0F);
/*   0*/  
/*  73*/  public static final Float FLOAT_ONE = new Float(1.0F);
/*   0*/  
/*  75*/  public static final Float FLOAT_MINUS_ONE = new Float(-1.0F);
/*   0*/  
/*   0*/  public static int toInt(String str) {
/* 107*/    return toInt(str, 0);
/*   0*/  }
/*   0*/  
/*   0*/  public static int toInt(String str, int defaultValue) {
/* 128*/    if (str == null)
/* 129*/      return defaultValue; 
/*   0*/    try {
/* 132*/      return Integer.parseInt(str);
/* 133*/    } catch (NumberFormatException nfe) {
/* 134*/      return defaultValue;
/*   0*/    } 
/*   0*/  }
/*   0*/  
/*   0*/  public static long toLong(String str) {
/* 156*/    return toLong(str, 0L);
/*   0*/  }
/*   0*/  
/*   0*/  public static long toLong(String str, long defaultValue) {
/* 177*/    if (str == null)
/* 178*/      return defaultValue; 
/*   0*/    try {
/* 181*/      return Long.parseLong(str);
/* 182*/    } catch (NumberFormatException nfe) {
/* 183*/      return defaultValue;
/*   0*/    } 
/*   0*/  }
/*   0*/  
/*   0*/  public static float toFloat(String str) {
/* 206*/    return toFloat(str, 0.0F);
/*   0*/  }
/*   0*/  
/*   0*/  public static float toFloat(String str, float defaultValue) {
/* 229*/    if (str == null)
/* 230*/      return defaultValue; 
/*   0*/    try {
/* 233*/      return Float.parseFloat(str);
/* 234*/    } catch (NumberFormatException nfe) {
/* 235*/      return defaultValue;
/*   0*/    } 
/*   0*/  }
/*   0*/  
/*   0*/  public static double toDouble(String str) {
/* 258*/    return toDouble(str, 0.0D);
/*   0*/  }
/*   0*/  
/*   0*/  public static double toDouble(String str, double defaultValue) {
/* 281*/    if (str == null)
/* 282*/      return defaultValue; 
/*   0*/    try {
/* 285*/      return Double.parseDouble(str);
/* 286*/    } catch (NumberFormatException nfe) {
/* 287*/      return defaultValue;
/*   0*/    } 
/*   0*/  }
/*   0*/  
/*   0*/  public static byte toByte(String str) {
/* 310*/    return toByte(str, (byte)0);
/*   0*/  }
/*   0*/  
/*   0*/  public static byte toByte(String str, byte defaultValue) {
/* 331*/    if (str == null)
/* 332*/      return defaultValue; 
/*   0*/    try {
/* 335*/      return Byte.parseByte(str);
/* 336*/    } catch (NumberFormatException nfe) {
/* 337*/      return defaultValue;
/*   0*/    } 
/*   0*/  }
/*   0*/  
/*   0*/  public static short toShort(String str) {
/* 359*/    return toShort(str, (short)0);
/*   0*/  }
/*   0*/  
/*   0*/  public static short toShort(String str, short defaultValue) {
/* 380*/    if (str == null)
/* 381*/      return defaultValue; 
/*   0*/    try {
/* 384*/      return Short.parseShort(str);
/* 385*/    } catch (NumberFormatException nfe) {
/* 386*/      return defaultValue;
/*   0*/    } 
/*   0*/  }
/*   0*/  
/*   0*/  public static Number createNumber(String str) throws NumberFormatException {
/*   0*/    // Byte code:
/*   0*/    //   0: aload_0
/*   0*/    //   1: ifnonnull -> 6
/*   0*/    //   4: aconst_null
/*   0*/    //   5: areturn
/*   0*/    //   6: aload_0
/*   0*/    //   7: invokestatic isBlank : (Ljava/lang/CharSequence;)Z
/*   0*/    //   10: ifeq -> 23
/*   0*/    //   13: new java/lang/NumberFormatException
/*   0*/    //   16: dup
/*   0*/    //   17: ldc 'A blank string is not a valid number'
/*   0*/    //   19: invokespecial <init> : (Ljava/lang/String;)V
/*   0*/    //   22: athrow
/*   0*/    //   23: aload_0
/*   0*/    //   24: ldc '--'
/*   0*/    //   26: invokevirtual startsWith : (Ljava/lang/String;)Z
/*   0*/    //   29: ifeq -> 34
/*   0*/    //   32: aconst_null
/*   0*/    //   33: areturn
/*   0*/    //   34: aload_0
/*   0*/    //   35: ldc '0x'
/*   0*/    //   37: invokevirtual startsWith : (Ljava/lang/String;)Z
/*   0*/    //   40: ifne -> 52
/*   0*/    //   43: aload_0
/*   0*/    //   44: ldc '-0x'
/*   0*/    //   46: invokevirtual startsWith : (Ljava/lang/String;)Z
/*   0*/    //   49: ifeq -> 57
/*   0*/    //   52: aload_0
/*   0*/    //   53: invokestatic createInteger : (Ljava/lang/String;)Ljava/lang/Integer;
/*   0*/    //   56: areturn
/*   0*/    //   57: aload_0
/*   0*/    //   58: aload_0
/*   0*/    //   59: invokevirtual length : ()I
/*   0*/    //   62: iconst_1
/*   0*/    //   63: isub
/*   0*/    //   64: invokevirtual charAt : (I)C
/*   0*/    //   67: istore_1
/*   0*/    //   68: aload_0
/*   0*/    //   69: bipush #46
/*   0*/    //   71: invokevirtual indexOf : (I)I
/*   0*/    //   74: istore #5
/*   0*/    //   76: aload_0
/*   0*/    //   77: bipush #101
/*   0*/    //   79: invokevirtual indexOf : (I)I
/*   0*/    //   82: aload_0
/*   0*/    //   83: bipush #69
/*   0*/    //   85: invokevirtual indexOf : (I)I
/*   0*/    //   88: iadd
/*   0*/    //   89: iconst_1
/*   0*/    //   90: iadd
/*   0*/    //   91: istore #6
/*   0*/    //   93: iload #5
/*   0*/    //   95: iconst_m1
/*   0*/    //   96: if_icmple -> 173
/*   0*/    //   99: iload #6
/*   0*/    //   101: iconst_m1
/*   0*/    //   102: if_icmple -> 153
/*   0*/    //   105: iload #6
/*   0*/    //   107: iload #5
/*   0*/    //   109: if_icmpge -> 139
/*   0*/    //   112: new java/lang/NumberFormatException
/*   0*/    //   115: dup
/*   0*/    //   116: new java/lang/StringBuilder
/*   0*/    //   119: dup
/*   0*/    //   120: invokespecial <init> : ()V
/*   0*/    //   123: aload_0
/*   0*/    //   124: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*   0*/    //   127: ldc ' is not a valid number.'
/*   0*/    //   129: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*   0*/    //   132: invokevirtual toString : ()Ljava/lang/String;
/*   0*/    //   135: invokespecial <init> : (Ljava/lang/String;)V
/*   0*/    //   138: athrow
/*   0*/    //   139: aload_0
/*   0*/    //   140: iload #5
/*   0*/    //   142: iconst_1
/*   0*/    //   143: iadd
/*   0*/    //   144: iload #6
/*   0*/    //   146: invokevirtual substring : (II)Ljava/lang/String;
/*   0*/    //   149: astore_3
/*   0*/    //   150: goto -> 162
/*   0*/    //   153: aload_0
/*   0*/    //   154: iload #5
/*   0*/    //   156: iconst_1
/*   0*/    //   157: iadd
/*   0*/    //   158: invokevirtual substring : (I)Ljava/lang/String;
/*   0*/    //   161: astore_3
/*   0*/    //   162: aload_0
/*   0*/    //   163: iconst_0
/*   0*/    //   164: iload #5
/*   0*/    //   166: invokevirtual substring : (II)Ljava/lang/String;
/*   0*/    //   169: astore_2
/*   0*/    //   170: goto -> 195
/*   0*/    //   173: iload #6
/*   0*/    //   175: iconst_m1
/*   0*/    //   176: pop2
/*   0*/    //   177: goto -> 191
/*   0*/    //   180: aload_0
/*   0*/    //   181: iconst_0
/*   0*/    //   182: iload #6
/*   0*/    //   184: invokevirtual substring : (II)Ljava/lang/String;
/*   0*/    //   187: astore_2
/*   0*/    //   188: goto -> 193
/*   0*/    //   191: aload_0
/*   0*/    //   192: astore_2
/*   0*/    //   193: aconst_null
/*   0*/    //   194: astore_3
/*   0*/    //   195: iload_1
/*   0*/    //   196: invokestatic isDigit : (C)Z
/*   0*/    //   199: ifne -> 533
/*   0*/    //   202: iload_1
/*   0*/    //   203: bipush #46
/*   0*/    //   205: if_icmpeq -> 533
/*   0*/    //   208: iload #6
/*   0*/    //   210: iconst_m1
/*   0*/    //   211: if_icmple -> 244
/*   0*/    //   214: iload #6
/*   0*/    //   216: aload_0
/*   0*/    //   217: invokevirtual length : ()I
/*   0*/    //   220: iconst_1
/*   0*/    //   221: isub
/*   0*/    //   222: if_icmpge -> 244
/*   0*/    //   225: aload_0
/*   0*/    //   226: iload #6
/*   0*/    //   228: iconst_1
/*   0*/    //   229: iadd
/*   0*/    //   230: aload_0
/*   0*/    //   231: invokevirtual length : ()I
/*   0*/    //   234: iconst_1
/*   0*/    //   235: isub
/*   0*/    //   236: invokevirtual substring : (II)Ljava/lang/String;
/*   0*/    //   239: astore #4
/*   0*/    //   241: goto -> 247
/*   0*/    //   244: aconst_null
/*   0*/    //   245: astore #4
/*   0*/    //   247: aload_0
/*   0*/    //   248: iconst_0
/*   0*/    //   249: aload_0
/*   0*/    //   250: invokevirtual length : ()I
/*   0*/    //   253: iconst_1
/*   0*/    //   254: isub
/*   0*/    //   255: invokevirtual substring : (II)Ljava/lang/String;
/*   0*/    //   258: astore #7
/*   0*/    //   260: aload_2
/*   0*/    //   261: invokestatic isAllZeros : (Ljava/lang/String;)Z
/*   0*/    //   264: ifeq -> 279
/*   0*/    //   267: aload #4
/*   0*/    //   269: invokestatic isAllZeros : (Ljava/lang/String;)Z
/*   0*/    //   272: ifeq -> 279
/*   0*/    //   275: iconst_1
/*   0*/    //   276: goto -> 280
/*   0*/    //   279: iconst_0
/*   0*/    //   280: istore #8
/*   0*/    //   282: iload_1
/*   0*/    //   283: lookupswitch default -> 506, 68 -> 459, 70 -> 421, 76 -> 340, 100 -> 459, 102 -> 421, 108 -> 340
/*   0*/    //   340: aload_3
/*   0*/    //   341: ifnonnull -> 394
/*   0*/    //   344: aload #4
/*   0*/    //   346: ifnonnull -> 394
/*   0*/    //   349: aload #7
/*   0*/    //   351: iconst_0
/*   0*/    //   352: invokevirtual charAt : (I)C
/*   0*/    //   355: bipush #45
/*   0*/    //   357: if_icmpne -> 372
/*   0*/    //   360: aload #7
/*   0*/    //   362: iconst_1
/*   0*/    //   363: invokevirtual substring : (I)Ljava/lang/String;
/*   0*/    //   366: invokestatic isDigits : (Ljava/lang/String;)Z
/*   0*/    //   369: ifne -> 380
/*   0*/    //   372: aload #7
/*   0*/    //   374: invokestatic isDigits : (Ljava/lang/String;)Z
/*   0*/    //   377: ifeq -> 394
/*   0*/    //   380: aload #7
/*   0*/    //   382: invokestatic createLong : (Ljava/lang/String;)Ljava/lang/Long;
/*   0*/    //   385: areturn
/*   0*/    //   386: astore #9
/*   0*/    //   388: aload #7
/*   0*/    //   390: invokestatic createBigInteger : (Ljava/lang/String;)Ljava/math/BigInteger;
/*   0*/    //   393: areturn
/*   0*/    //   394: new java/lang/NumberFormatException
/*   0*/    //   397: dup
/*   0*/    //   398: new java/lang/StringBuilder
/*   0*/    //   401: dup
/*   0*/    //   402: invokespecial <init> : ()V
/*   0*/    //   405: aload_0
/*   0*/    //   406: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*   0*/    //   409: ldc ' is not a valid number.'
/*   0*/    //   411: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*   0*/    //   414: invokevirtual toString : ()Ljava/lang/String;
/*   0*/    //   417: invokespecial <init> : (Ljava/lang/String;)V
/*   0*/    //   420: athrow
/*   0*/    //   421: aload #7
/*   0*/    //   423: invokestatic createFloat : (Ljava/lang/String;)Ljava/lang/Float;
/*   0*/    //   426: astore #9
/*   0*/    //   428: aload #9
/*   0*/    //   430: invokevirtual isInfinite : ()Z
/*   0*/    //   433: ifne -> 454
/*   0*/    //   436: aload #9
/*   0*/    //   438: invokevirtual floatValue : ()F
/*   0*/    //   441: fconst_0
/*   0*/    //   442: fcmpl
/*   0*/    //   443: ifne -> 451
/*   0*/    //   446: iload #8
/*   0*/    //   448: ifeq -> 454
/*   0*/    //   451: aload #9
/*   0*/    //   453: areturn
/*   0*/    //   454: goto -> 459
/*   0*/    //   457: astore #9
/*   0*/    //   459: aload #7
/*   0*/    //   461: invokestatic createDouble : (Ljava/lang/String;)Ljava/lang/Double;
/*   0*/    //   464: astore #9
/*   0*/    //   466: aload #9
/*   0*/    //   468: invokevirtual isInfinite : ()Z
/*   0*/    //   471: ifne -> 493
/*   0*/    //   474: aload #9
/*   0*/    //   476: invokevirtual floatValue : ()F
/*   0*/    //   479: f2d
/*   0*/    //   480: dconst_0
/*   0*/    //   481: dcmpl
/*   0*/    //   482: ifne -> 490
/*   0*/    //   485: iload #8
/*   0*/    //   487: ifeq -> 493
/*   0*/    //   490: aload #9
/*   0*/    //   492: areturn
/*   0*/    //   493: goto -> 498
/*   0*/    //   496: astore #9
/*   0*/    //   498: aload #7
/*   0*/    //   500: invokestatic createBigDecimal : (Ljava/lang/String;)Ljava/math/BigDecimal;
/*   0*/    //   503: areturn
/*   0*/    //   504: astore #9
/*   0*/    //   506: new java/lang/NumberFormatException
/*   0*/    //   509: dup
/*   0*/    //   510: new java/lang/StringBuilder
/*   0*/    //   513: dup
/*   0*/    //   514: invokespecial <init> : ()V
/*   0*/    //   517: aload_0
/*   0*/    //   518: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*   0*/    //   521: ldc ' is not a valid number.'
/*   0*/    //   523: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
/*   0*/    //   526: invokevirtual toString : ()Ljava/lang/String;
/*   0*/    //   529: invokespecial <init> : (Ljava/lang/String;)V
/*   0*/    //   532: athrow
/*   0*/    //   533: iload #6
/*   0*/    //   535: iconst_m1
/*   0*/    //   536: if_icmple -> 567
/*   0*/    //   539: iload #6
/*   0*/    //   541: aload_0
/*   0*/    //   542: invokevirtual length : ()I
/*   0*/    //   545: iconst_1
/*   0*/    //   546: isub
/*   0*/    //   547: if_icmpge -> 567
/*   0*/    //   550: aload_0
/*   0*/    //   551: iload #6
/*   0*/    //   553: iconst_1
/*   0*/    //   554: iadd
/*   0*/    //   555: aload_0
/*   0*/    //   556: invokevirtual length : ()I
/*   0*/    //   559: invokevirtual substring : (II)Ljava/lang/String;
/*   0*/    //   562: astore #4
/*   0*/    //   564: goto -> 570
/*   0*/    //   567: aconst_null
/*   0*/    //   568: astore #4
/*   0*/    //   570: aload_3
/*   0*/    //   571: ifnonnull -> 598
/*   0*/    //   574: aload #4
/*   0*/    //   576: ifnonnull -> 598
/*   0*/    //   579: aload_0
/*   0*/    //   580: invokestatic createInteger : (Ljava/lang/String;)Ljava/lang/Integer;
/*   0*/    //   583: areturn
/*   0*/    //   584: astore #7
/*   0*/    //   586: aload_0
/*   0*/    //   587: invokestatic createLong : (Ljava/lang/String;)Ljava/lang/Long;
/*   0*/    //   590: areturn
/*   0*/    //   591: astore #7
/*   0*/    //   593: aload_0
/*   0*/    //   594: invokestatic createBigInteger : (Ljava/lang/String;)Ljava/math/BigInteger;
/*   0*/    //   597: areturn
/*   0*/    //   598: aload_2
/*   0*/    //   599: invokestatic isAllZeros : (Ljava/lang/String;)Z
/*   0*/    //   602: ifeq -> 617
/*   0*/    //   605: aload #4
/*   0*/    //   607: invokestatic isAllZeros : (Ljava/lang/String;)Z
/*   0*/    //   610: ifeq -> 617
/*   0*/    //   613: iconst_1
/*   0*/    //   614: goto -> 618
/*   0*/    //   617: iconst_0
/*   0*/    //   618: istore #7
/*   0*/    //   620: aload_0
/*   0*/    //   621: invokestatic createFloat : (Ljava/lang/String;)Ljava/lang/Float;
/*   0*/    //   624: astore #8
/*   0*/    //   626: aload #8
/*   0*/    //   628: invokevirtual isInfinite : ()Z
/*   0*/    //   631: ifne -> 652
/*   0*/    //   634: aload #8
/*   0*/    //   636: invokevirtual floatValue : ()F
/*   0*/    //   639: fconst_0
/*   0*/    //   640: fcmpl
/*   0*/    //   641: ifne -> 649
/*   0*/    //   644: iload #7
/*   0*/    //   646: ifeq -> 652
/*   0*/    //   649: aload #8
/*   0*/    //   651: areturn
/*   0*/    //   652: goto -> 657
/*   0*/    //   655: astore #8
/*   0*/    //   657: aload_0
/*   0*/    //   658: invokestatic createDouble : (Ljava/lang/String;)Ljava/lang/Double;
/*   0*/    //   661: astore #8
/*   0*/    //   663: aload #8
/*   0*/    //   665: invokevirtual isInfinite : ()Z
/*   0*/    //   668: ifne -> 689
/*   0*/    //   671: aload #8
/*   0*/    //   673: invokevirtual doubleValue : ()D
/*   0*/    //   676: dconst_0
/*   0*/    //   677: dcmpl
/*   0*/    //   678: ifne -> 686
/*   0*/    //   681: iload #7
/*   0*/    //   683: ifeq -> 689
/*   0*/    //   686: aload #8
/*   0*/    //   688: areturn
/*   0*/    //   689: goto -> 694
/*   0*/    //   692: astore #8
/*   0*/    //   694: aload_0
/*   0*/    //   695: invokestatic createBigDecimal : (Ljava/lang/String;)Ljava/math/BigDecimal;
/*   0*/    //   698: areturn
/*   0*/    // Line number table:
/*   0*/    //   Java source line number -> byte code offset
/*   0*/    //   #453	-> 0
/*   0*/    //   #454	-> 4
/*   0*/    //   #456	-> 6
/*   0*/    //   #457	-> 13
/*   0*/    //   #459	-> 23
/*   0*/    //   #464	-> 32
/*   0*/    //   #466	-> 34
/*   0*/    //   #467	-> 52
/*   0*/    //   #469	-> 57
/*   0*/    //   #473	-> 68
/*   0*/    //   #474	-> 76
/*   0*/    //   #476	-> 93
/*   0*/    //   #478	-> 99
/*   0*/    //   #479	-> 105
/*   0*/    //   #480	-> 112
/*   0*/    //   #482	-> 139
/*   0*/    //   #484	-> 153
/*   0*/    //   #486	-> 162
/*   0*/    //   #488	-> 173
/*   0*/    //   #489	-> 180
/*   0*/    //   #491	-> 191
/*   0*/    //   #493	-> 193
/*   0*/    //   #495	-> 195
/*   0*/    //   #496	-> 208
/*   0*/    //   #497	-> 225
/*   0*/    //   #499	-> 244
/*   0*/    //   #502	-> 247
/*   0*/    //   #503	-> 260
/*   0*/    //   #504	-> 282
/*   0*/    //   #507	-> 340
/*   0*/    //   #511	-> 380
/*   0*/    //   #512	-> 386
/*   0*/    //   #515	-> 388
/*   0*/    //   #518	-> 394
/*   0*/    //   #522	-> 421
/*   0*/    //   #523	-> 428
/*   0*/    //   #526	-> 451
/*   0*/    //   #531	-> 454
/*   0*/    //   #529	-> 457
/*   0*/    //   #536	-> 459
/*   0*/    //   #537	-> 466
/*   0*/    //   #538	-> 490
/*   0*/    //   #542	-> 493
/*   0*/    //   #540	-> 496
/*   0*/    //   #544	-> 498
/*   0*/    //   #545	-> 504
/*   0*/    //   #550	-> 506
/*   0*/    //   #556	-> 533
/*   0*/    //   #557	-> 550
/*   0*/    //   #559	-> 567
/*   0*/    //   #561	-> 570
/*   0*/    //   #564	-> 579
/*   0*/    //   #565	-> 584
/*   0*/    //   #569	-> 586
/*   0*/    //   #570	-> 591
/*   0*/    //   #573	-> 593
/*   0*/    //   #577	-> 598
/*   0*/    //   #579	-> 620
/*   0*/    //   #580	-> 626
/*   0*/    //   #581	-> 649
/*   0*/    //   #585	-> 652
/*   0*/    //   #583	-> 655
/*   0*/    //   #587	-> 657
/*   0*/    //   #588	-> 663
/*   0*/    //   #589	-> 686
/*   0*/    //   #593	-> 689
/*   0*/    //   #591	-> 692
/*   0*/    //   #595	-> 694
/*   0*/    // Local variable table:
/*   0*/    //   start	length	slot	name	descriptor
/*   0*/    //   150	3	3	dec	Ljava/lang/String;
/*   0*/    //   170	3	2	mant	Ljava/lang/String;
/*   0*/    //   162	11	3	dec	Ljava/lang/String;
/*   0*/    //   188	3	2	mant	Ljava/lang/String;
/*   0*/    //   241	3	4	exp	Ljava/lang/String;
/*   0*/    //   428	26	9	f	Ljava/lang/Float;
/*   0*/    //   466	27	9	d	Ljava/lang/Double;
/*   0*/    //   260	273	7	numeric	Ljava/lang/String;
/*   0*/    //   282	251	8	allZeros	Z
/*   0*/    //   247	286	4	exp	Ljava/lang/String;
/*   0*/    //   564	3	4	exp	Ljava/lang/String;
/*   0*/    //   626	26	8	f	Ljava/lang/Float;
/*   0*/    //   663	26	8	d	Ljava/lang/Double;
/*   0*/    //   620	79	7	allZeros	Z
/*   0*/    //   0	699	0	str	Ljava/lang/String;
/*   0*/    //   68	631	1	lastChar	C
/*   0*/    //   193	506	2	mant	Ljava/lang/String;
/*   0*/    //   195	504	3	dec	Ljava/lang/String;
/*   0*/    //   570	129	4	exp	Ljava/lang/String;
/*   0*/    //   76	623	5	decPos	I
/*   0*/    //   93	606	6	expPos	I
/*   0*/    // Exception table:
/*   0*/    //   from	to	target	type
/*   0*/    //   380	385	386	java/lang/NumberFormatException
/*   0*/    //   421	453	457	java/lang/NumberFormatException
/*   0*/    //   459	492	496	java/lang/NumberFormatException
/*   0*/    //   498	503	504	java/lang/NumberFormatException
/*   0*/    //   579	583	584	java/lang/NumberFormatException
/*   0*/    //   586	590	591	java/lang/NumberFormatException
/*   0*/    //   620	651	655	java/lang/NumberFormatException
/*   0*/    //   657	688	692	java/lang/NumberFormatException
/*   0*/  }
/*   0*/  
/*   0*/  private static boolean isAllZeros(String str) {
/* 610*/    if (str == null)
/* 611*/      return true; 
/* 613*/    for (int i = str.length() - 1; i >= 0; i--) {
/* 614*/      if (str.charAt(i) != '0')
/* 615*/        return false; 
/*   0*/    } 
/* 618*/    return (str.length() > 0);
/*   0*/  }
/*   0*/  
/*   0*/  public static Float createFloat(String str) {
/* 632*/    if (str == null)
/* 633*/      return null; 
/* 635*/    return Float.valueOf(str);
/*   0*/  }
/*   0*/  
/*   0*/  public static Double createDouble(String str) {
/* 648*/    if (str == null)
/* 649*/      return null; 
/* 651*/    return Double.valueOf(str);
/*   0*/  }
/*   0*/  
/*   0*/  public static Integer createInteger(String str) {
/* 665*/    if (str == null)
/* 666*/      return null; 
/* 669*/    return Integer.decode(str);
/*   0*/  }
/*   0*/  
/*   0*/  public static Long createLong(String str) {
/* 682*/    if (str == null)
/* 683*/      return null; 
/* 685*/    return Long.valueOf(str);
/*   0*/  }
/*   0*/  
/*   0*/  public static BigInteger createBigInteger(String str) {
/* 698*/    if (str == null)
/* 699*/      return null; 
/* 701*/    return new BigInteger(str);
/*   0*/  }
/*   0*/  
/*   0*/  public static BigDecimal createBigDecimal(String str) {
/* 714*/    if (str == null)
/* 715*/      return null; 
/* 718*/    if (StringUtils.isBlank(str))
/* 719*/      throw new NumberFormatException("A blank string is not a valid number"); 
/* 721*/    return new BigDecimal(str);
/*   0*/  }
/*   0*/  
/*   0*/  public static long min(long[] array) {
/* 736*/    if (array == null)
/* 737*/      throw new IllegalArgumentException("The Array must not be null"); 
/* 738*/    if (array.length == 0)
/* 739*/      throw new IllegalArgumentException("Array cannot be empty."); 
/* 743*/    long min = array[0];
/* 744*/    for (int i = 1; i < array.length; i++) {
/* 745*/      if (array[i] < min)
/* 746*/        min = array[i]; 
/*   0*/    } 
/* 750*/    return min;
/*   0*/  }
/*   0*/  
/*   0*/  public static int min(int[] array) {
/* 763*/    if (array == null)
/* 764*/      throw new IllegalArgumentException("The Array must not be null"); 
/* 765*/    if (array.length == 0)
/* 766*/      throw new IllegalArgumentException("Array cannot be empty."); 
/* 770*/    int min = array[0];
/* 771*/    for (int j = 1; j < array.length; j++) {
/* 772*/      if (array[j] < min)
/* 773*/        min = array[j]; 
/*   0*/    } 
/* 777*/    return min;
/*   0*/  }
/*   0*/  
/*   0*/  public static short min(short[] array) {
/* 790*/    if (array == null)
/* 791*/      throw new IllegalArgumentException("The Array must not be null"); 
/* 792*/    if (array.length == 0)
/* 793*/      throw new IllegalArgumentException("Array cannot be empty."); 
/* 797*/    short min = array[0];
/* 798*/    for (int i = 1; i < array.length; i++) {
/* 799*/      if (array[i] < min)
/* 800*/        min = array[i]; 
/*   0*/    } 
/* 804*/    return min;
/*   0*/  }
/*   0*/  
/*   0*/  public static byte min(byte[] array) {
/* 817*/    if (array == null)
/* 818*/      throw new IllegalArgumentException("The Array must not be null"); 
/* 819*/    if (array.length == 0)
/* 820*/      throw new IllegalArgumentException("Array cannot be empty."); 
/* 824*/    byte min = array[0];
/* 825*/    for (int i = 1; i < array.length; i++) {
/* 826*/      if (array[i] < min)
/* 827*/        min = array[i]; 
/*   0*/    } 
/* 831*/    return min;
/*   0*/  }
/*   0*/  
/*   0*/  public static double min(double[] array) {
/* 845*/    if (array == null)
/* 846*/      throw new IllegalArgumentException("The Array must not be null"); 
/* 847*/    if (array.length == 0)
/* 848*/      throw new IllegalArgumentException("Array cannot be empty."); 
/* 852*/    double min = array[0];
/* 853*/    for (int i = 1; i < array.length; i++) {
/* 854*/      if (Double.isNaN(array[i]))
/* 855*/        return Double.NaN; 
/* 857*/      if (array[i] < min)
/* 858*/        min = array[i]; 
/*   0*/    } 
/* 862*/    return min;
/*   0*/  }
/*   0*/  
/*   0*/  public static float min(float[] array) {
/* 876*/    if (array == null)
/* 877*/      throw new IllegalArgumentException("The Array must not be null"); 
/* 878*/    if (array.length == 0)
/* 879*/      throw new IllegalArgumentException("Array cannot be empty."); 
/* 883*/    float min = array[0];
/* 884*/    for (int i = 1; i < array.length; i++) {
/* 885*/      if (Float.isNaN(array[i]))
/* 886*/        return Float.NaN; 
/* 888*/      if (array[i] < min)
/* 889*/        min = array[i]; 
/*   0*/    } 
/* 893*/    return min;
/*   0*/  }
/*   0*/  
/*   0*/  public static long max(long[] array) {
/* 908*/    if (array == null)
/* 909*/      throw new IllegalArgumentException("The Array must not be null"); 
/* 910*/    if (array.length == 0)
/* 911*/      throw new IllegalArgumentException("Array cannot be empty."); 
/* 915*/    long max = array[0];
/* 916*/    for (int j = 1; j < array.length; j++) {
/* 917*/      if (array[j] > max)
/* 918*/        max = array[j]; 
/*   0*/    } 
/* 922*/    return max;
/*   0*/  }
/*   0*/  
/*   0*/  public static int max(int[] array) {
/* 935*/    if (array == null)
/* 936*/      throw new IllegalArgumentException("The Array must not be null"); 
/* 937*/    if (array.length == 0)
/* 938*/      throw new IllegalArgumentException("Array cannot be empty."); 
/* 942*/    int max = array[0];
/* 943*/    for (int j = 1; j < array.length; j++) {
/* 944*/      if (array[j] > max)
/* 945*/        max = array[j]; 
/*   0*/    } 
/* 949*/    return max;
/*   0*/  }
/*   0*/  
/*   0*/  public static short max(short[] array) {
/* 962*/    if (array == null)
/* 963*/      throw new IllegalArgumentException("The Array must not be null"); 
/* 964*/    if (array.length == 0)
/* 965*/      throw new IllegalArgumentException("Array cannot be empty."); 
/* 969*/    short max = array[0];
/* 970*/    for (int i = 1; i < array.length; i++) {
/* 971*/      if (array[i] > max)
/* 972*/        max = array[i]; 
/*   0*/    } 
/* 976*/    return max;
/*   0*/  }
/*   0*/  
/*   0*/  public static byte max(byte[] array) {
/* 989*/    if (array == null)
/* 990*/      throw new IllegalArgumentException("The Array must not be null"); 
/* 991*/    if (array.length == 0)
/* 992*/      throw new IllegalArgumentException("Array cannot be empty."); 
/* 996*/    byte max = array[0];
/* 997*/    for (int i = 1; i < array.length; i++) {
/* 998*/      if (array[i] > max)
/* 999*/        max = array[i]; 
/*   0*/    } 
/*1003*/    return max;
/*   0*/  }
/*   0*/  
/*   0*/  public static double max(double[] array) {
/*1017*/    if (array == null)
/*1018*/      throw new IllegalArgumentException("The Array must not be null"); 
/*1019*/    if (array.length == 0)
/*1020*/      throw new IllegalArgumentException("Array cannot be empty."); 
/*1024*/    double max = array[0];
/*1025*/    for (int j = 1; j < array.length; j++) {
/*1026*/      if (Double.isNaN(array[j]))
/*1027*/        return Double.NaN; 
/*1029*/      if (array[j] > max)
/*1030*/        max = array[j]; 
/*   0*/    } 
/*1034*/    return max;
/*   0*/  }
/*   0*/  
/*   0*/  public static float max(float[] array) {
/*1048*/    if (array == null)
/*1049*/      throw new IllegalArgumentException("The Array must not be null"); 
/*1050*/    if (array.length == 0)
/*1051*/      throw new IllegalArgumentException("Array cannot be empty."); 
/*1055*/    float max = array[0];
/*1056*/    for (int j = 1; j < array.length; j++) {
/*1057*/      if (Float.isNaN(array[j]))
/*1058*/        return Float.NaN; 
/*1060*/      if (array[j] > max)
/*1061*/        max = array[j]; 
/*   0*/    } 
/*1065*/    return max;
/*   0*/  }
/*   0*/  
/*   0*/  public static long min(long a, long b, long c) {
/*1079*/    if (b < a)
/*1080*/      a = b; 
/*1082*/    if (c < a)
/*1083*/      a = c; 
/*1085*/    return a;
/*   0*/  }
/*   0*/  
/*   0*/  public static int min(int a, int b, int c) {
/*1097*/    if (b < a)
/*1098*/      a = b; 
/*1100*/    if (c < a)
/*1101*/      a = c; 
/*1103*/    return a;
/*   0*/  }
/*   0*/  
/*   0*/  public static short min(short a, short b, short c) {
/*1115*/    if (b < a)
/*1116*/      a = b; 
/*1118*/    if (c < a)
/*1119*/      a = c; 
/*1121*/    return a;
/*   0*/  }
/*   0*/  
/*   0*/  public static byte min(byte a, byte b, byte c) {
/*1133*/    if (b < a)
/*1134*/      a = b; 
/*1136*/    if (c < a)
/*1137*/      a = c; 
/*1139*/    return a;
/*   0*/  }
/*   0*/  
/*   0*/  public static double min(double a, double b, double c) {
/*1155*/    return Math.min(Math.min(a, b), c);
/*   0*/  }
/*   0*/  
/*   0*/  public static float min(float a, float b, float c) {
/*1171*/    return Math.min(Math.min(a, b), c);
/*   0*/  }
/*   0*/  
/*   0*/  public static long max(long a, long b, long c) {
/*1185*/    if (b > a)
/*1186*/      a = b; 
/*1188*/    if (c > a)
/*1189*/      a = c; 
/*1191*/    return a;
/*   0*/  }
/*   0*/  
/*   0*/  public static int max(int a, int b, int c) {
/*1203*/    if (b > a)
/*1204*/      a = b; 
/*1206*/    if (c > a)
/*1207*/      a = c; 
/*1209*/    return a;
/*   0*/  }
/*   0*/  
/*   0*/  public static short max(short a, short b, short c) {
/*1221*/    if (b > a)
/*1222*/      a = b; 
/*1224*/    if (c > a)
/*1225*/      a = c; 
/*1227*/    return a;
/*   0*/  }
/*   0*/  
/*   0*/  public static byte max(byte a, byte b, byte c) {
/*1239*/    if (b > a)
/*1240*/      a = b; 
/*1242*/    if (c > a)
/*1243*/      a = c; 
/*1245*/    return a;
/*   0*/  }
/*   0*/  
/*   0*/  public static double max(double a, double b, double c) {
/*1261*/    return Math.max(Math.max(a, b), c);
/*   0*/  }
/*   0*/  
/*   0*/  public static float max(float a, float b, float c) {
/*1277*/    return Math.max(Math.max(a, b), c);
/*   0*/  }
/*   0*/  
/*   0*/  public static boolean isDigits(String str) {
/*1292*/    if (StringUtils.isEmpty(str))
/*1293*/      return false; 
/*1295*/    for (int i = 0; i < str.length(); i++) {
/*1296*/      if (!Character.isDigit(str.charAt(i)))
/*1297*/        return false; 
/*   0*/    } 
/*1300*/    return true;
/*   0*/  }
/*   0*/  
/*   0*/  public static boolean isNumber(String str) {
/*1317*/    if (StringUtils.isEmpty(str))
/*1318*/      return false; 
/*1320*/    char[] chars = str.toCharArray();
/*1321*/    int sz = chars.length;
/*   0*/    boolean hasExp = false;
/*   0*/    boolean hasDecPoint = false;
/*   0*/    boolean allowSigns = false;
/*   0*/    boolean foundDigit = false;
/*1327*/    int start = (chars[0] == '-') ? 1 : 0;
/*1328*/    if (sz > start + 1 && 
/*1329*/      chars[start] == '0' && chars[start + 1] == 'x') {
/*1330*/      int j = start + 2;
/*1331*/      if (j == sz)
/*1332*/        return false; 
/*1335*/      for (; j < chars.length; j++) {
/*1336*/        if ((chars[j] < '0' || chars[j] > '9') && (chars[j] < 'a' || chars[j] > 'f') && (chars[j] < 'A' || chars[j] > 'F'))
/*1339*/          return false; 
/*   0*/      } 
/*1342*/      return true;
/*   0*/    } 
/*1345*/    sz--;
/*1347*/    int i = start;
/*1350*/    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
/*1351*/      if (chars[i] >= '0' && chars[i] <= '9') {
/*1352*/        foundDigit = true;
/*1353*/        allowSigns = false;
/*1355*/      } else if (chars[i] == '.') {
/*1356*/        if (hasDecPoint || hasExp)
/*1358*/          return false; 
/*1360*/        hasDecPoint = true;
/*1361*/      } else if (chars[i] == 'e' || chars[i] == 'E') {
/*1363*/        if (hasExp)
/*1365*/          return false; 
/*1367*/        if (!foundDigit)
/*1368*/          return false; 
/*1370*/        hasExp = true;
/*1371*/        allowSigns = true;
/*1372*/      } else if (chars[i] == '+' || chars[i] == '-') {
/*1373*/        if (!allowSigns)
/*1374*/          return false; 
/*1376*/        allowSigns = false;
/*1377*/        foundDigit = false;
/*   0*/      } else {
/*1379*/        return false;
/*   0*/      } 
/*1381*/      i++;
/*   0*/    } 
/*1383*/    if (i < chars.length) {
/*1384*/      if (chars[i] >= '0' && chars[i] <= '9')
/*1386*/        return true; 
/*1388*/      if (chars[i] == 'e' || chars[i] == 'E')
/*1390*/        return false; 
/*1392*/      if (chars[i] == '.') {
/*1393*/        if (hasDecPoint || hasExp)
/*1395*/          return false; 
/*1398*/        return foundDigit;
/*   0*/      } 
/*1400*/      if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F'))
/*1405*/        return foundDigit; 
/*1407*/      if (chars[i] == 'l' || chars[i] == 'L')
/*1410*/        return (foundDigit && !hasExp); 
/*1413*/      return false;
/*   0*/    } 
/*1417*/    return (!allowSigns && foundDigit);
/*   0*/  }
/*   0*/}
