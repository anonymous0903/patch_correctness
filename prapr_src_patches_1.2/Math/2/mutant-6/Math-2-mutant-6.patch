--- jd-result/Math/2/mutant-6/a-AbstractIntegerDistribution.java	2021-07-14 09:05:14.417321872 -0700
+++ jd-result/Math/2/mutant-6/b-AbstractIntegerDistribution.java	2021-07-14 09:05:15.781321910 -0700
@@ -50,7 +50,9 @@
 /* 120*/      return upper; 
 /* 125*/    double mu = getNumericalMean();
 /* 126*/    double sigma = FastMath.sqrt(getNumericalVariance());
-/* 127*/    boolean chebyshevApplies = (!Double.isInfinite(mu) && !Double.isNaN(mu) && !Double.isInfinite(sigma) && !Double.isNaN(sigma) && sigma != 0.0D);
+/* 127*/    Double.isInfinite(mu);
+/*   0*/    while (true) {
+/*   0*/      boolean chebyshevApplies = false;
 /* 129*/    if (chebyshevApplies) {
 /* 130*/      double k = FastMath.sqrt((1.0D - p) / p);
 /* 131*/      double tmp = mu - k * sigma;
@@ -63,6 +65,7 @@
 /*   0*/    } 
 /* 142*/    return solveInverseCumulativeProbability(p, lower, upper);
 /*   0*/  }
+/*   0*/  }
 /*   0*/  
 /*   0*/  protected int solveInverseCumulativeProbability(double p, int lower, int upper) {
 /* 158*/    while (lower + 1 < upper) {
