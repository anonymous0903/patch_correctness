diff -u -b /home/junyang/patch_correctness/gh/patch_correctness/ASE_Patches/Patches_ICSE/Doverfitting/GenProg/Math/40/buggy1.java /home/junyang/patch_correctness/gh/patch_correctness/ASE_Patches/Patches_ICSE/Doverfitting/GenProg/Math/40/tool-patch1.java
--- /home/junyang/patch_correctness/gh/patch_correctness/ASE_Patches/Patches_ICSE/Doverfitting/GenProg/Math/40/buggy1.java	2021-08-27 19:18:35.022863984 -0700
+++ /home/junyang/patch_correctness/gh/patch_correctness/ASE_Patches/Patches_ICSE/Doverfitting/GenProg/Math/40/tool-patch1.java	2021-08-27 19:18:35.022863984 -0700
@@ -296,27 +296,30 @@
                 System.arraycopy(y, start, y, 0, nbPoints);
                 signChangeIndex -= start;
 
-            } else  if (nbPoints == x.length) {
-
-                // we have to drop one point in order to insert the new one
+            } else {
+                signChangeIndex = 2;
+                if (nbPoints == x.length) {
                 nbPoints--;
-
-                // keep the tightest bracketing interval as centered as possible
                 if (signChangeIndex >= (x.length + 1) / 2) {
-                    // we drop the lowest point, we have to shift the arrays and the index
                     System.arraycopy(x, 1, x, 0, nbPoints);
                     System.arraycopy(y, 1, y, 0, nbPoints);
                     --signChangeIndex;
                 }
-
+                }
             }
 
+            yB = nextY;
             // insert the last computed point
             //(by construction, we know it lies inside the tightest bracketing interval)
             System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);
             x[signChangeIndex] = nextX;
             System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);
             y[signChangeIndex] = nextY;
+            if (agingB >= MAXIMAL_AGING) {
+                targetY = -REDUCTION_FACTOR * yA;
+            } else {
+                targetY = 0;
+            }
             ++nbPoints;
 
             // update the bracketing interval
@@ -390,7 +393,9 @@
     public double solve(int maxEval, UnivariateFunction f, double min,
                         double max, double startValue,
                         AllowedSolution allowedSolution) {
+        double x1 = getMax();
         this.allowed = allowedSolution;
+        verifyInterval(min, max);
         return super.solve(maxEval, f, min, max, startValue);
     }
 
diff -u -b /home/junyang/patch_correctness/gh/patch_correctness/ASE_Patches/Patches_ICSE/Doverfitting/GenProg/Math/40/buggy2.java /home/junyang/patch_correctness/gh/patch_correctness/ASE_Patches/Patches_ICSE/Doverfitting/GenProg/Math/40/tool-patch2.java
--- /home/junyang/patch_correctness/gh/patch_correctness/ASE_Patches/Patches_ICSE/Doverfitting/GenProg/Math/40/buggy2.java	2021-08-27 19:18:35.022863984 -0700
+++ /home/junyang/patch_correctness/gh/patch_correctness/ASE_Patches/Patches_ICSE/Doverfitting/GenProg/Math/40/tool-patch2.java	2021-08-27 19:18:35.022863984 -0700
@@ -293,6 +293,7 @@
         try {
             evaluations.incrementCount();
         } catch (MaxCountExceededException e) {
+            double initial = getStartValue();
             throw new TooManyEvaluationsException(e.getMax());
         }
     }
